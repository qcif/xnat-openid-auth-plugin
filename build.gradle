/*
 * xnat-openid-auth-plugin: build.gradle
 *
 */

buildscript {
    ext {
        vXnat = "1.8.0"
    }
}

plugins {
    id "application"
    id "eclipse"
    id "groovy"
    id "idea"
    id "jacoco"
    id "java"
    id "maven-publish"
    id "com.dorongold.task-tree" version "1.5"
    id "com.palantir.git-version" version "0.12.1"
    id "io.franzbecker.gradle-lombok" version "4.0.0"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "net.linguica.maven-settings" version "0.5"
    id "org.nrg.xnat.build.xnat-data-builder" version "1.8.0"
}

group "au.edu.qcif.xnat.openid"
version "1.1.1-SNAPSHOT"
description "XNAT OpenID Authentication Provider"

repositories {
    mavenLocal()
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
    mavenCentral()
}

mainClassName = "ValidateLdap"

configurations {
    implementation.extendsFrom(implementAndInclude)

    all {
        exclude group: "log4j"
        exclude group: "net.logstash.logback"
        exclude group: "org.nrg", module: "pipelineBase"
        exclude group: "org.nrg", module: "pipelineBuild"
        exclude group: "org.nrg", module: "pipelineWorkflow"
        exclude group: "org.nrg", module: "pipelineXNAT"
        exclude group: "org.nrg.xnat.pipeline"
        exclude group: "org.slf4j", module: "jcl-over-slf4j"
        exclude group: "org.slf4j", module: "jul-to-slf4j"
        exclude group: "org.slf4j", module: "slf4j-simple"
    }
}

dependencyManagement.imports {
    mavenBom "org.nrg:parent:${vXnat}"
}

dependencies {
    implementation platform("org.nrg:parent:${vXnat}")

    implementation "org.nrg.xnat:web"
    implementation "org.nrg:prefs"
    implementation "org.nrg:framework"
    implementation "org.springframework:spring-web"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-web"
	implementation "org.springframework.security.oauth:spring-security-oauth2"
    implementation "org.springframework.security:spring-security-jwt"
    implementation "org.apache.commons:commons-lang3"
    implementation "commons-io:commons-io"
    implementation "org.slf4j:slf4j-api"

    testImplementation "junit:junit"
    testImplementation "org.springframework:spring-test" 
    testImplementation "com.github.tomakehurst:wiremock"
    testImplementation "org.mockito:mockito-core"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileJava {
    options.fork = false
}

jacoco {
    toolVersion = dependencyManagement.importedProperties["jacoco.version"]
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.required = true
    }
}

// Pulls in the Jenkins BUILD_NUMBER environment variable if available.
def buildDate = new Date()
def buildNumber = System.getenv().BUILD_NUMBER?.toInteger() ?: "Manual"
def isDirty, branchName, gitHash, gitHashFull, commitDistance, lastTag, isCleanTag

try {
    def gitDetails = versionDetails()
    isDirty = gitVersion().endsWith ".dirty"
    branchName = gitDetails.branchName ?: "Unknown"
    gitHash = gitDetails.gitHash
    gitHashFull = gitDetails.gitHashFull
    commitDistance = gitDetails.commitDistance
    lastTag = gitDetails.lastTag
    isCleanTag = gitDetails.isCleanTag
} catch (IllegalArgumentException e) {
    logger.info "Got an error trying to read VCS metadata from git. It's possible this project is not under VCS control. Using placeholder values for manifest entries."
    isDirty = true
    branchName = "Unknown"
    gitHash = "None"
    gitHashFull = "None"
    commitDistance = 0
    lastTag = "None"
    isCleanTag = false
}

ext.gitManifest = manifest {
    attributes "Application-Name": project.description,
            "Build-Date": buildDate,
            "Build-Number": buildNumber,
            "Implementation-Version": project.version,
            "Implementation-Sha": gitHash,
            "Implementation-Sha-Full": gitHashFull,
            "Implementation-Commit": commitDistance,
            "Implementation-LastTag": lastTag,
            "Implementation-Branch": branchName,
            "Implementation-CleanTag": isCleanTag,
            "Implementation-Dirty": isDirty
}

logger.info """
Building artifacts with manifest attributes:

 * Build-Date:              ${buildDate}
 * Build-Number:            ${buildNumber}
 * Implementation-Version:  ${version}
 * Implementation-Sha-Full: ${gitHashFull}
 * Implementation-Sha:      ${gitHash}
 * Implementation-Commit:   ${commitDistance}
 * Implementation-LastTag:  ${lastTag}
 * Implementation-Branch:   ${branchName}
 * Implementation-CleanTag: ${isCleanTag}
 * Implementation-Dirty:    ${isDirty}
"""

task sourceJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    manifest {
        from gitManifest
    }
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier "javadoc"
    manifest {
        from gitManifest
    }
    from javadoc.destinationDir
}

jar {
    dependsOn test, sourceJar, javadocJar
    enabled = true
    manifest {
        from gitManifest
    }
}

task xnatPluginJar(type: Jar) {
    dependsOn test, sourceJar, javadocJar
    zip64 true
    archiveClassifier.set "xpl"
    manifest {
        from gitManifest
    }
    // files and folders with "-dev" or "--xx" in their name
    // will not be in the compiled jar
    exclude "**/resources/**/*-dev**"
    exclude "**/resources/**/*--xx**"
    from {
        configurations.implementAndInclude.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

sourceSets {
    main {
        java {
            srcDir "build/xnat-generated/src/main/java"
        }
        resources {
            srcDir "build/xnat-generated/src/main/resources"
        }
    }
}

test {
    useJUnit()
    maxHeapSize = "1G"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifacts {
                artifact sourceJar
                artifact javadocJar
                artifact xnatPluginJar
            }

            pom.withXml {
                def root = asNode()
                root.appendNode("name", project.description)
                root.appendNode("url", "https://github.com/nrgxnat/xnat-openid-auth-plugin")
                root.appendNode("inceptionYear", "2017")

                root.appendNode("scm").with {
                    appendNode("url", "https://github.com/nrgxnat/xnat-openid-auth-plugin")
                    appendNode("connection", "scm:https://github.com/nrgxnat/xnat-openid-auth-plugin")
                    appendNode("developerConnection", "scm:git@github.com:nrgxnat/xnat-openid-auth-plugin.git")
                }

                root.appendNode("licenses").appendNode("license").with {
                    appendNode("name", "Simplified BSD 2-Clause License")
                    appendNode("url", "https://xnat.org/about/license.php")
                    appendNode("distribution", "repo")
                }

                root.appendNode("developers").with {
                    appendNode("developer").with {
                        appendNode("id", "abrazzatti")
                        appendNode("name", "Andrew Brazzatti")
                        appendNode("email", "andrew@redboxresearchdata.com.au")
                    }
                    appendNode("developer").with {
                        appendNode("id", "hkodden")
                        appendNode("name", "Harry Kodden")
                        appendNode("email", "harry@e-tunity.nl")
                    }
                    appendNode("developer").with {
                        appendNode("id", "rherrick")
                        appendNode("name", "Rick Herrick")
                        appendNode("email", "jrherrick@wustl.edu")
                    }
                    appendNode("developer").with {
                        appendNode("id", "shilob")
                        appendNode("name", "Shilo B")
                        appendNode("email", "shiloworks@gmail.com")
                    }
                    appendNode("developer").with {
                        appendNode("id", "wcho")
                        appendNode("name", "Woonchan Cho")
                        appendNode("email", "wcho24@wustl.edu")
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://nrgxnat.jfrog.io/nrgxnat/libs-${project.version.endsWith("-SNAPSHOT") ? "snapshot" : "release"}"
            // The value for name must match <id> in ~/.m2/settings.xml
            name = "XNAT_Artifactory"
        }
    }
}

